#imports
import streamlit as st
from spotify import get_trending_playlist_data, get_access_token, hybrid_recommendations
import config
import pandas as pd
from sklearn.preprocessing import MinMaxScaler

#get client ID and secret from the config file
CLIENT_ID = config.CLIENT_ID
CLIENT_SECRET = config.CLIENT_SECRET

#get access token using client ID and secret
#use access token to make requests to Spotify's API, like fetching playlist data 
access_token = get_access_token(CLIENT_ID, CLIENT_SECRET)

#set title of the Streamlit app
st.title("Kara's Music Rec")

#initialize some vars
#status indicates whether data was successfully retrieved
#input_song_name is the name of the song entered by user 
#suggestion indicates whether the suggestions were successfully generated by the model 
status = False
input_song_name = None
suggestion = False

#ask user for their Spotify playlist ID
playlist_id = st.text_input('Please enter your Spotify playlist ID:')

if playlist_id:
    # if the user enters a playlist ID, show it back to them
    st.write('You entered the playlist ID:', playlist_id)
    
    #get the data for the playlist using the access token and playlist id 
    #returns data in a dataframe and sets status to true 
    music_df, status = get_trending_playlist_data(playlist_id, access_token)
    
    if status:
        #if the data was retrieved successfully, status is true, show the track names
        st.write("Here are the tracks in your playlist:")
        for i in range(len(music_df)):
            st.write(f"{i + 1}. {music_df.iloc[i]['Track Name']}")
            #iterate through the dataframe and display the track names 
    else:
        #error handling
        st.write("Please recheck the playlist ID!!! Something is wrong")

    #scaler object to scale the music features
    scaler = MinMaxScaler()
    
    #select the music features to use 
    features = ['Danceability', 'Energy', 'Key', 'Loudness', 'Mode', 'Speechiness', 
                'Acousticness', 'Instrumentalness', 'Liveness', 'Valence', 'Tempo']
    
    #scale the features between 0 and 1 
    #scaler.fit_transform() normalizes the features to make sure they are on a scale from 0-1
    #makes it easier to compute 
    music_features_scaled = scaler.fit_transform(music_df[features])

    #ask the user to input a song name for recommendations
    input_song_name = st.text_input('Enter a song name to get the recommendations!!:')
    
    if input_song_name:
        #get the recommendations based on the input song
        recommendations, suggestion = hybrid_recommendations(input_song_name, music_df, music_features_scaled, num_recommendations=5)
        
        if suggestion:
            #if we got recommendations, show them
            st.write("Here are the recommended songs you should listen to:")
            for i in range(len(recommendations)):
                st.write(f"{i + 1}. {recommendations.iloc[i]['Track Name']}")
        else:
            #if no recommendations were found, show a message
            st.write("There are no recommendations for that song, sorry :(")

